<template>
<div class="page" data-name="settings">
  <div class="navbar">
    <div class="navbar-bg"></div>
    <div class="navbar-inner sliding">
      <div class="title">Settings</div>
    </div>
  </div>
  <div class="page-content">
  ${FilterExpenses(expenses.value,false,false).length > 0 ?  $h`<div class="block-title">Rörliga kostnader</div>` : $h`
  <div class="block">
    <div class="block-title">
    Du verkar inte ha några transaktioner att visa.
    </div>
    <div>
      <p>Antingen lever du ett liv helt utanför det moderna samhället, eller så har du inte angivit en giltig URL till ditt kalkylark. Oavsett vilket bör du se över dina val och få ordning på situationen.
      </p>
    </div>
  </div>`}
    ${Object.keys(GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))).map((category) => {
    if (!budget.value[category]) {return "";}
    return $h`
    <div class="card">
  <div class="card-header">${category}</div>
  <div class="card-content flex-direction-column justify-content-center">
    <!-- Add gauge-init class, and specify parameters in data- attributes -->
    <div
      class="gauge gauge-init my-gauge" budget-item="${category}"
      data-type="circle"
      data-value=${GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))[category].reduce((sum,expense) => {
      return sum - expense.sum
      },0)/budget.value[category]}
      data-value-text="${Math.ceil(GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))[category].reduce((sum,expense) => {
      return sum + Math.abs(expense.sum)
      },0))}kr"
      data-value-text-color="${getGaugeColor(GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))[category].reduce((sum,expense) => {
      return sum - expense.sum
      },0) / budget.value[category])}"
      data-border-color="${getGaugeColor(GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))[category].reduce((sum,expense) => {
      return sum - expense.sum
      },0) / budget.value[category])}"
      data-label-text="av ${budget.value[category]}kr"
    ></div>
  </div>
</div>`
    })}
  </div>
  <div class="fab fab-right-bottom panel-open" data-panel="right">
    <a href="#">
      <i class="icon material-icons if-md">settings</i>
    </a>
  </div>
<!-- Right panel with reveal effect-->
<div class="panel panel-right panel-reveal">
  <div class="view">
    <div class="page">
      <div class="navbar">
        <div class="navbar-bg"></div>
        <div class="navbar-inner">
          <div class="title">Inställningar</div>
        </div>
      </div>
      <div class="page-content">
        <div class="block">
        <form class="list list-strong-ios list-dividers-ios list-outline-ios" id="my-form">
          <ul>
          ${Object.keys(budget.value).map((category) => {
          return $h`
           <li>
             <div class="item-content item-input">
               <div class="item-inner">
                 <div class="item-title item-label">${category}</div>
                 <div class="item-input-wrap">
                   <input type="number" name="${category}" value="${budget.value[category]}" placeholder="${budget.value[category]}kr" />
                 </div>
               </div>
             </div>
           </li>
           `
          })}
          </ul>
        </form>
        <div class="block block-strong grid grid-cols-1 grid-gap">
          <a id="savebudget" class="button button-fill convert-form-to-data" href="#">Spara</a>
        </div>
        </div>
      </div>
    </div>
  </div>
</div>
</div>
</template>
<script>
import { GroupExpensesByCategory,FilterExpenses } from "../Utils/GroupExpenses.js";
  export default async (props, { $, $on, $f7, $store, $update}) => {
    const expenses = $store.getters.getExpenses;
    const budget = $store.getters.getBudget;
    const activeUser = $store.getters.getActiveUser;
    const salaryPeriod = $store.getters.getSalaryPeriod;


    // Lifecycle hook to attach events
    $on("pageInit", () => {
      const saveButton = document.querySelector("#savebudget");
      const form = document.querySelector("#my-form");
      var gaugesObject = {};


      if (saveButton && form) {
        saveButton.addEventListener("click", async (e) => {
          e.preventDefault();

          gaugesObject = {};
          
          for (var gauge of document.querySelectorAll(".gauge")) {
          gaugesObject[gauge.attributes["budget-item"].value] = gauge;
          };

          // Get form data
          const formData = $f7.form.convertToData(form);

          // Dispatch to store
          await $store.dispatch("setBudget", {
            budget: formData,
          });

          for (var category of Object.keys(formData)) {
          
          if (!gaugesObject[category]) continue;
          console.log(`Setting gauge for ${category}`)
          console.log(gaugesObject[category])
            gaugesObject[category].f7Gauge.update({
              value: GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))[category].reduce((sum,expense) => {
      return sum - expense.sum
      },0)/budget.value[category],
              labelText: `av ${budget.value[category]}kr`,
              borderColor: getGaugeColor(GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))[category].reduce((sum,expense) => {
      return sum - expense.sum
      },0) / budget.value[category]),
            valueTextColor: getGaugeColor(GroupExpensesByCategory(FilterExpenses(expenses.value,false,false))[category].reduce((sum,expense) => {
      return sum - expense.sum
      },0) / budget.value[category])
            });
            }

          // Send data to the server
          fetch(`/api/post/budget?id=${activeUser.value}&period=${salaryPeriod.value}`, {
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
            },
            method: "POST",
            body: JSON.stringify(formData),
          })
            .then((res) => {
            showNotificationFull();
            console.log(res)
            })
            .catch((err) => console.error(err));
            $update();
        });
      }
    });

    const getGaugeColor = (value) =>  {
      if (value <= 0.5) {
      return "green"
      } else if (0.5 < value && value < 1){
        return "#ff9800";
      } else {
      return "red";
      }
    }

    let notificationFull;
    const showNotificationFull = () => {
      // Create notification
      if (!notificationFull) {
        notificationFull = $f7.notification.create({
          icon: '<i class="icon material-icons icon-green if-md">check_circle</i>',
          title: 'Budget Tracker',
          titleRightText: 'now',
          subtitle: 'Succé!',
          text: 'Budgeten är sparad',
          closeTimeout: 3000,
        });
      }
      // Open it
      notificationFull.open();
    };

    

    return $render;
  };
</script>

