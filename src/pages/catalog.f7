<template>
  <div class="page" data-name="catalog">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="title">Sammanfattning</div>
      </div>
    </div>
    <div class="page-content">
      <div class="block-title">Inline with custom toolbar</div>
      <div class="card">
      <div class="block block-strong no-padding">
        <div id="demo-calendar-inline-container"></div>
      </div>
      </div>
      <div class="searchbar-backdrop"></div>
      <form class="searchbar searchbar-init" data-search-container=".card-container" data-search-in=".item-title">
        <div class="searchbar-inner">
          <div class="searchbar-input-wrap">
            <input type="search" placeholder="${expenses.value.length > 0 ? "Sök" : "Inga transaktioner här inte"}" />
            <i class="searchbar-icon"></i>
            <span class="input-clear-button"></span>
          </div>
          <span class="searchbar-disable-button">Cancel</span>
        </div>
      </form>
      <div class="card-container">
      ${(expenses.value.length > 0) ? Object.keys(GroupExpensesByCategory(FilterExpenses(expenses.value, filterSettings.value.includeFixed, filterSettings.value.includeSavings))).map((expense) => {
      if (!activeUser.value) {
      return "";
      }
      return $h`
      <div class="card">
        <div class="card-header item-title">${expense}</div>
        <div class="card-content">
          <div class="list list-dividers">
            <ul>
              ${GroupExpensesByCategory(FilterExpenses(expenses.value,filterSettings.value.includeFixed,filterSettings.value.includeSavings))[expense]?.map((exp) => {
              if (!activeUser.value) {
              return "";
              }
              return $h`<li>
                <a class="item-link item-content popover-open expense-item" data-popover=".popover-menu"
                  data-expense="${exp.id}">
                  <div class="item-media">
                    <i class="icon material-icons if-md icon-${exp.sum < 0 ? "red" : "green"}">${exp.sum < 0 ? "remove" : "add"}</i>
                  </div>
                  <div class="item-inner">
                    <div class="item-title">
                      ${exp.description}
                    </div>
                    <div class="item-after">
                      ${exp.sum}kr
                    </div>
                </a>
          </div>
          </li>`}
          )}
          ${

          $h`<li>
            <div class="item-content">
              <div class="item-media">
                <i class="icon material-icons if-md">equal</i>
              </div>
              <div class="item-inner">
                <div class="item-title">
                  Totalt
                </div>
                <div class="item-after">
                  ${activeUser.value != null ? Math.round(GroupExpensesByCategory(FilterExpenses(expenses.value,filterSettings.value.includeFixed,filterSettings.value.includeSavings))[expense]?.reduce((sum,expense) => {
                  return sum + expense.sum;
                  },0)) : ""}
                </div>
              </div>
            </div>
          </li>`}
          </ul>
        </div>
      </div>
      <div class="card-footer">${expense.date}</div>
    </div>
    `
    }
    ) : ""
    }
    </div>

    <!-- START POPOVER EXPENSE -->
    <div class="popover popover-menu">
      <div class="popover-angle"></div>
      <div class="popover-inner">
        <div class="list">
          <ul>
            <li>
              <div class="item-inner">
                <div class="item-title"> ${activeExpense.value?.description ?? "Tomt"}</div>
              </div>
            </li>
            <li>
              <a class="item-link item-content popover-close" @click=${createExpensePopup}>
                <div class="item-media">
                  <i class="icon material-icons if-md">edit</i>
                </div>
                <div class="item-inner">
                  <div class="item-title">Redigera</div>
                </div>
              </a>
            </li>
            <li>
              <a class="item-link item-content">
                <div class="item-media">
                  <i class="icon material-icons icon-red if-md">delete</i>
                </div>
                <div class="item-inner">
                  <div class="item-title">Radera</div>
                </div>
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <!-- Additional fab-extended class -->

  </div>
  <div class="fab fab-right-bottom">
    <a>
      <i class="icon material-icons if-md">filter_alt</i>
    </a>
    <div class="fab-buttons fab-buttons-top">
      <a href="" class="fab-label-button" @click=${filterExpenses}>
        <span>1</span>
        <span class="fab-label">Fasta kostnader</span>
      </a>
      <a href="" class="fab-label-button">
        <span>2</span>
        <span class="fab-label">Sparande</span>
      </a>
      <a href="" class="fab-label-button">
        <span>3</span>
        <span class="fab-label">Hemlig bonus</span>
      </a>
    </div>
  </div>
  </div>
</template>
<script>
  import Gradient from 'javascript-color-gradient';
  import { 
  SumExpensesByDate,
  GroupExpensesByCategory,
  FilterExpenses
  } from "../Utils/GroupExpenses.js";

export default async (props,{$store,$,$on,$f7,$update}) => {
    const sleep = async (millis) => {
      return new Promise(resolve => setTimeout(resolve, millis));
    };
    
    
    var expenses = $store.getters.getExpenses;
    var allExpenses = $store.getters.getFullYearExpenses;
    var activeExpense = $store.getters.getActiveExpense;
    var filterSettings = $store.getters.getFilterSettings;
    const activeUser = $store.getters.getActiveUser;


    const getColor = (value) => {
    return new Gradient()
    .setColorGradient("#8acbec", "#f5e569", "#f2062f")
    .setMidpoint(20)
    .getColor(value);
    }

    const handleDumbShit = (date) => {
      //console.log(`Changing ${date}`)
      var split = date.split("-");
      //console.log(`I split it into ${split}`)
      var result =  [[...split][0],parseInt([...split][1]) < 9 ? "0" + (1 + parseInt([...split][1])) : (1+ parseInt([...split][1])), parseInt([...split][2]) < 10 ? "0" + [...split][2] : [...split][2]].join("-");
      //console.log(`Now i have ${result}`);
      return result;
    }
    const setColors = () => {
      const expenseSums = SumExpensesByDate([...allExpenses.value]);
      let maxValue = Math.max(...Object.values(expenseSums));
      let minValue = Math.min(...Object.values(expenseSums));
      for (var date of Object.keys(expenseSums)) {
        let dateBoxes = Array.from(document.querySelectorAll(".calendar-day"))
        let dateBox = dateBoxes.filter(box => handleDumbShit(box.attributes["data-date"].value) == date);
        if (dateBox) {
           for (var dateBoxo of dateBox) {
            dateBoxo.style.color = getColor(Math.ceil(20* ((expenseSums[date]- minValue + 0.1)/(maxValue-minValue))));
            dateBoxo.addEventListener("click",(e) => {
              $f7.popover.create({
              el: ".popover-menu",
              targetEl: e.target.closest(".calendar-date")
              }).open();
            })
           }
           
        }
      
      }
    }

    

    $on("pageInit",async () => {

    console.log($store.state)

      let attempts = 0;
      let maxAttempts = 150000;
      $f7.preloader.show();
      while (expenses.value.length == 0 && attempts <= maxAttempts) {
        await sleep(300);
        ++attempts;
      }
      $f7.preloader.hide();
    
      let expenseButtons = document.querySelectorAll(".expense-item");
      for (var expenseButton of expenseButtons) {
        expenseButton.addEventListener("click", (e) => {
          var expenseId= e.target
            .closest("a")
            .attributes["data-expense"]
            .value;
        console.log(expenseId)
            var clickedExpense = expenses.find(expense => expense.id === expenseId);
            console.log(clickedExpense);
            $store.dispatch("setActiveExpense", clickedExpense);
            console.log($store.getters.getActiveExpense)
          
        });
      };

      // Inline with custom toolbar
      var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      var calendarInline = $f7.calendar.create({
        containerEl: '#demo-calendar-inline-container',
        value: [new Date()],
        renderToolbar: function () {
          return '<div class="toolbar calendar-custom-toolbar no-shadow">' +
            '<div class="toolbar-inner">' +
            '<div class="left">' +
            '<a  class="link icon-only"><i class="icon icon-back"></i></a>' +
            '</div>' +
            '<div class="center"></div>' +
            '<div class="right">' +
            '<a  class="link icon-only"><i class="icon icon-forward"></i></a>' +
            '</div>' +
            '</div>' +
            '</div>';
        },
        on: {
          init: function (c) {
            setColors();
            $('.calendar-custom-toolbar .center').text(monthNames[c.currentMonth] + ', ' + c.currentYear);
            $('.calendar-custom-toolbar .left .link').on('click', function () {
              calendarInline.prevMonth();
              setColors();
            });
            $('.calendar-custom-toolbar .right .link').on('click', function () {
              calendarInline.nextMonth();
              setColors();
            });
          },
          monthYearChangeStart: function (c) {
            $('.calendar-custom-toolbar .center').text(monthNames[c.currentMonth] + ', ' + c.currentYear);
          }
        }
      });

      
    });

    const filterExpenses = () => {
      $store.dispatch("toggleIncludeFixed");
    }


    let expensePopup;
    const createExpensePopup = () => {
      // Create popup
      if (!expensePopup) {
        expensePopup = $f7.popup.create({
          content: /*html*/`
            <div class="popup">
              <div class="page">
                <div class="navbar">
                  <div class="navbar-bg"></div>
                  <div class="navbar-inner">
                    <div class="title">Dynamic Popup</div>
                    <div class="right"><a  class="link popup-close">Close</a></div>
                  </div>
                </div>
                <div class="page-content">
                  ${activeExpense.value.description}
                </div>
              </div>
            </div>
          `
        });
      }
      // Open it
      expensePopup.open();
    }


    return $render;
  }
</script>